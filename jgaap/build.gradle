/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'org.beryx.runtime' version '1.13.1'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation files('src/main/resources/lib/commons-cli-1.2.jar')
    implementation files('src/main/resources/lib/edu.mit.jwi_2.2.3.jar')
    implementation files('src/main/resources/lib/guava-17.0.jar')
    implementation files('src/main/resources/lib/javassist-3.17.1.jar')
    implementation files('src/main/resources/lib/jscience-4.3.1.jar')
    implementation files('src/main/resources/lib/junit.jar')
    implementation files('src/main/resources/lib/log4j-api-2.23.1.jar')
    implementation files('src/main/resources/lib/log4j-core-2.23.1.jar')
    implementation files('src/main/resources/lib/log4j-iostreams-2.23.1.jar')
    implementation files('src/main/resources/lib/reflections-0.9.8.jar')
    implementation files('src/main/resources/lib/stanford-ner-2012-07-09.jar')
    implementation files('src/main/resources/lib/stanford-postagger-2012-07-09.jar')
    implementation files('src/main/resources/lib/tika-app-1.5.jar')
    implementation files('src/main/resources/lib/weka.jar')
    implementation files('src/main/resources/lib/WordSegment.jar')
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

compileJava {
    options.release = 21
    options.fork = true
}


sourceSets {
    main {
        output.resourcesDir = "build/classes/java/main/com/jgaap/resources"
    }
    test {
        output.resourcesDir = "build/classes/java/main/com/jgaap/resources"
    }
}

javafx {
    version = '21.0.3'
    modules = [ 'javafx.controls', 'javafx.graphics' ]
}

application {
    applicationName = 'JGAAP'
    applicationDefaultJvmArgs = ['-XX:+UseG1GC', '-Xmx4096m']
    mainClass = 'com.jgaap.JGAAP'
}

jar {
    //from("build/classes/java/main/com/jgaap/")
    manifest {
        attributes(
            "Application-Name": "JGAAP",
            "Main-Class": 'com.jgaap.JGAAP',
            "Class-Path": '.'
            )
        }
}

//https://github.com/beryx/badass-runtime-plugin/
runtime {

    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    modules = [ 'javafx.controls', 'javafx.graphics' ]
    launcher {
        jvmArgs = [
            '-XX:+UseG1GC', '-Xmx4096m'
        ]
        runInBinDir = true
        noConsole = true
    }

// Uncomment and adjust the code below if you want to generate images for multiple platforms.
// (You need to also uncomment the line 'targetPlatformName = ...' in the jpackage block.)

    jpackage {
        // Uncomment and adjust the following line if your runtime task is configured to generate images for multiple platforms
        // targetPlatformName = "mac"

        def currentOs = org.gradle.internal.os.OperatingSystem.current()
        def arch = System.getProperty("os.arch")
        def imgType = currentOs.windows ? 'ico' : currentOs.macOsX ? 'icns' : 'png'
        resourceDir = file("$buildDir/classes/java/main/com/jgaap/resources")
        imageOptions += ['--icon', "src/main/resources/ui/icon.$imgType"]
        installerOptions += ['--resource-dir', "src/main/resources"]
        installerOptions += ['--vendor', 'EVLLabs']
        installerName = "JGAAP-" + arch
        appVersion = '9.0.0'

        if(currentOs.windows) {
            installerType = 'msi'
            imageOptions += ["--win-console"]
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
        }
        else if (currentOs.linux) {
            installerType = 'deb'
            installerOptions += ['--linux-package-name', 'JGAAP', '--linux-shortcut']
        }
        else if (currentOs.macOsX) {
            installerOptions += ['--mac-package-name', 'JGAAP']
            installerType = 'dmg'
            
        }
    }
}
tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
